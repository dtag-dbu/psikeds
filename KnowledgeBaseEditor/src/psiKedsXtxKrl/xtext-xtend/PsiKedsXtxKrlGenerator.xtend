/*
 * generated by Xtext
 */
package org.psikeds.kb.modelling.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess	

import org.eclipse.emf.common.util.EList
import org.psikeds.kb.modelling.psiKedsXtxKrl.KnowledgeBase
import org.psikeds.kb.modelling.psiKedsXtxKrl.XLabel

import org.psikeds.kb.modelling.psiKedsXtxKrl.Sensor
import org.psikeds.kb.modelling.psiKedsXtxKrl.SensorStringAttrArea
import org.psikeds.kb.modelling.psiKedsXtxKrl.SensorIntAttrArea
import org.psikeds.kb.modelling.psiKedsXtxKrl.SensorFloatAttrArea
/* 
import org.psikeds.kb.modelling.psiKedsXtxKrl.SensorIntRangeArea
import org.psikeds.kb.modelling.psiKedsXtxKrl.SensorFloatRangeArea
* 
*/
import org.psikeds.kb.modelling.psiKedsXtxKrl.Concept
import org.psikeds.kb.modelling.psiKedsXtxKrl.Variant
import org.psikeds.kb.modelling.psiKedsXtxKrl.IsFulfilledBy
import org.psikeds.kb.modelling.psiKedsXtxKrl.IsConstitutedBy
import org.psikeds.kb.modelling.psiKedsXtxKrl.OpenContextualPath
import org.psikeds.kb.modelling.psiKedsXtxKrl.ClosedContextualPath
import org.psikeds.kb.modelling.psiKedsXtxKrl.RelationalStatement

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class PsiKedsXtxKrlGenerator implements IGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		val model = resource.contents.head as KnowledgeBase
		fsa.generateFile(model.kbId+'.pkb.xml', model.toCode)
	}
	

	def CharSequence toCode(KnowledgeBase base) '''
<?xml version="1.0" encoding="UTF-8"?>
<!--
«base.kbId» : «base?.kbRelease» : «base?.kbTeaser» 
(C) «IF base.kbCopyRight != null»«base.kbCopyRight»«ENDIF» 

A psiKeds knowledge base: developed for being used by the inference machine
of psiKeds, the purpose system induced knowledge entity delivery system
http://www.psikeds.org/) and generated by the psiKedsXtXKrl-Generator

«IF base.kbLicense != null»
This file is licensed under the conditions of a/the
«base.kbLicense»«ENDIF»

-->
<kb:knowledgebase xmlns="http://org.psikeds.knowledgebase"
  xmlns:kb="http://org.psikeds.knowledgebase"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://org.psikeds.knowledgebase kb.xsd">
  <kb:meta>
    «IF base.kbFirstCreationDate != null»
    <kb:created>«base.kbFirstCreationDate»</kb:created>«ENDIF»
    «IF base.kbLastModificationDate != null»
    <kb:lastmodified>«base.kbLastModificationDate»</kb:lastmodified>«ENDIF»
    «IF base.kbLanguage != null»
    <kb:language>«base.kbLanguage»</kb:language>«ENDIF»
    «IF base.kbRelease != null»
    <kb:version>«base.kbRelease»</kb:version>«ENDIF»
    «IF base.kbCreatorName.length > 0»
      «base.kbCreatorName.map[stringToXmlTag(it,'kb:creator')].join()»
	  «ENDIF»
    «IF base.kbDescription.length > 0»
      «base.kbDescription.map[stringToXmlTag(it,'kb:description')].join()»
    «ENDIF»
  </kb:meta>
  <kb:data>
    <kb:sensors> 
    «IF (base.listOfSensorStringAttrAreas.length > 0) »
      «FOR sensorStringArea : base.listOfSensorStringAttrAreas»
        «sensorStringArea.toXml»
      «ENDFOR»
    «ENDIF»
    «IF (base.listOfSensorIntAttrAreas.length > 0) »
      «FOR sensorIntDigitArea : base.listOfSensorIntAttrAreas»
        «sensorIntDigitArea.toXml»
      «ENDFOR»
    «ENDIF»
    «IF (base.listOfSensorFloatAttrAreas.length > 0) »
      «FOR sensorFloatDigitArea : base.listOfSensorFloatAttrAreas»
        «sensorFloatDigitArea.toXml»
      «ENDFOR»
    «ENDIF» 
    </kb:sensors>
  
    <kb:concepts>
    «IF (base.listOfConcepts.length > 0) »
      «FOR concept : base.listOfConcepts» «concept.toXml»«ENDFOR»
    «ENDIF» 
    </kb:concepts>
    
    «IF base.listOfPurposes.length > 0»
    <kb:purposes>
      «FOR purpose : base.listOfPurposes»
      <kb:purpose id="«purpose.name»" «IF purpose.root != null»root="«purpose.root»"«ELSE»root="false"«ENDIF»>
        «purpose.labeledDescription.toXml("")»
      </kb:purpose>
      «ENDFOR»
    </kb:purposes>
    «ENDIF»   
    
    «IF base.listOfVariants.length > 0»
    <kb:variants>
      «FOR variant : base.listOfVariants»«variant.toXml»«ENDFOR»
    </kb:variants>  
    «ENDIF»
    
    «IF base.listOfIsFulfilledByStatements.length > 0»
    <kb:alternatives>
      «FOR isFulfilledBy : base.listOfIsFulfilledByStatements»
        «isFulfilledBy.toXml»
      «ENDFOR»
    </kb:alternatives>  
    «ENDIF»
     
    «IF base.listOfIsConstitutedByStatements.length > 0»
    <kb:constituents>
      «FOR isConstitutedBy : base.listOfIsConstitutedByStatements»
        «isConstitutedBy.toXml»
      «ENDFOR»
    </kb:constituents> 
    «ENDIF»
    «IF ( ( base.listOfContextualEnforceEvents != null &&
            base.listOfContextualEnforceEvents.length > 0)
        || ( base.listOfContextEventClosedByVariants != null &&
            base.listOfContextEventClosedByVariants.length > 0 )
        || ( base.listOfContextEventClosedByStrings != null &&
            base.listOfContextEventClosedByStrings.length > 0)
        || ( base.listOfContextEventClosedByInts != null &&
            base.listOfContextEventClosedByInts.length > 0)
        || ( base.listOfContextEventClosedByFloats != null &&
            base.listOfContextEventClosedByFloats.length > 0)
        || ( base.listOfContextEventClosedByConcepts != null &&
            base.listOfContextEventClosedByConcepts.length > 0)         
        )»
    <kb:events>
      «IF ( base.listOfContextualEnforceEvents != null )»
      «FOR enforceEvent :  base.listOfContextualEnforceEvents»
         <kb:event id="«enforceEvent.name»" 
           nexusId="«enforceEvent.fact.ref.name»" 
           contextPsPvRefs="«enforceEvent.fact.ref.name»">
           «enforceEvent.labeledDescription.toXml("")»
           <kb:variantTrigger variantRef="«enforceEvent.fact.ref.name»" />
         </kb:event>
      «ENDFOR»
      «ENDIF»
      «IF ( base.listOfContextEventClosedByVariants != null )»
      «FOR varEvent :  base.listOfContextEventClosedByVariants»
         <kb:event id="«varEvent.name»" 
           «varEvent.context.toXml»>
           «varEvent.labeledDescription.toXml("")»
           «IF varEvent.negation»<kb:not />«ENDIF»
           <kb:variantTrigger variantRef="«varEvent.fact.ref.name»" />
         </kb:event>
      «ENDFOR»
      «ENDIF» 
      «IF ( base.listOfContextEventClosedByStrings != null )»
      «FOR attStrEvent : base.listOfContextEventClosedByStrings»
         <kb:event id="«attStrEvent.name»" 
           «attStrEvent.context.toXml»>
           «attStrEvent.labeledDescription.toXml("")»
           «IF attStrEvent.negation»<kb:not />«ENDIF»
           <kb:attStrTrigger strValueRef="«attStrEvent.fact.ref.name»" />
         </kb:event>
      «ENDFOR»
      «ENDIF»
      «IF ( base.listOfContextEventClosedByInts != null )»
      «FOR attIntEvent : base.listOfContextEventClosedByInts»
         <kb:event id="«attIntEvent.name»" 
           «attIntEvent.context.toXml»>
           «attIntEvent.labeledDescription.toXml("")»
           «IF attIntEvent.negation»<kb:not />«ENDIF»
           <kb:attIntTrigger intValueRef="«attIntEvent.fact.ref.name»" />
         </kb:event>
      «ENDFOR»
      «ENDIF»
      «IF ( base.listOfContextEventClosedByFloats != null )»
      «FOR attFloatEvent : base.listOfContextEventClosedByFloats»
         <kb:event id="«attFloatEvent.name»" 
           «attFloatEvent.context.toXml»>
           «attFloatEvent.labeledDescription.toXml("")»
           «IF attFloatEvent.negation»<kb:not />«ENDIF»
           <kb:attFloatTrigger floatValueRef="«attFloatEvent.fact.ref.name»" />
         </kb:event>
      «ENDFOR»
      «ENDIF»
      «IF ( base.listOfContextEventClosedByConcepts != null )»
      «FOR concEvent : base.listOfContextEventClosedByConcepts»
         <kb:event id="«concEvent.name»" 
           «concEvent.context.toXml»>
           «concEvent.labeledDescription.toXml("")»
           «IF concEvent.negation»<kb:not />«ENDIF»
           <kb:conceptTrigger conceptRef="«concEvent.fact.ref.name»" />
         </kb:event>
      «ENDFOR»
      «ENDIF»      
    </kb:events> 
    «ENDIF»
    
    «IF  ( base.listOfRelationsParameters != null &&
            base.listOfRelationsParameters.length > 0)»
    <kb:parameters>
      «FOR parameter :  base.listOfRelationsParameters»
         <kb:parameter id="«parameter.name»" 
           «parameter.context.toXml»>
           «parameter.labeledDescription.toXml("")»
           <kb:valueSet sensorRef="«parameter.fact.ref.name»" />
         </kb:parameter>
      «ENDFOR»
    </kb:parameters> 
    «ENDIF»
    
   «IF ( ( base.listOfLogicalEnforcers != null &&
            base.listOfLogicalEnforcers.length > 0)
        || ( base.listOfLogicalRules != null &&
            base.listOfLogicalRules.length > 0)         
        )»
    <kb:rules>
      «IF ( base.listOfLogicalEnforcers != null )»
      «FOR enforcerRule :  base.listOfLogicalEnforcers»
         <kb:rule id="«enforcerRule.name»"
            premiseEventRefs="«enforcerRule.premise.name»" 
            conclusioEventRef="«enforcerRule.conclusio.name»" > 
           «enforcerRule.labeledDescription.toXml("")»
         </kb:rule>
      «ENDFOR»
      «ENDIF» 

      «IF ( base.listOfLogicalRules != null )»
      «FOR logicalRule :  base.listOfLogicalRules»
         <kb:rule id="«logicalRule.name»"
           premiseEventRefs="«FOR evPoin : logicalRule.listOfPremiseEvents»«evPoin.name» «ENDFOR»»" 
           conclusioEventRef="«logicalRule.conclusio.name»" > 
           «logicalRule.labeledDescription.toXml("")»
         </kb:rule>
      «ENDFOR»
      «ENDIF»    
    </kb:rules> 
    «ENDIF»
    «IF (  ( base.listOfNormRCs != null &&
             base.listOfNormRCs.length > 0)
        || ( base.listOfCondRCs != null &&
             base.listOfCondRCs.length > 0)
        )»
    <kb:relations>
      «IF base.listOfNormRCs != null»
      «FOR rel :  base.listOfNormRCs»
      <kb:relation id="«rel.name»" type="«rel.stmnt.relType»" «rel.stmnt.toXml»>
        «rel.labeledDescription.toXml("")»
      </kb:relation>
      «ENDFOR»
      «ENDIF»
      «IF base.listOfCondRCs != null»
      «FOR rel :  base.listOfCondRCs»
      <kb:ifrelation id="«rel.name»"  >
        «rel.labeledDescription.toXml("")»
        <kb:ifPremise eventRef="«rel.trigger.name»" />
        <kb:thenReleation type="«rel.stmnt.relType»" «rel.stmnt.toXml» />
      </kb:ifrelation>
      «ENDFOR»
      «ENDIF»      
      
    </kb:relations>    
    «ENDIF»
  </kb:data>    
</kb:knowledgebase>
	'''
	
	def String toXml (RelationalStatement stmnt) '''
    «IF stmnt.leVarArg != null»lParamRef="«stmnt.leVarArg.name»"«ENDIF»
    «IF stmnt.leStrConst != null» lStrConstRef="«stmnt.leStrConst.name»" «ENDIF»
    «IF stmnt.leIntConst != null» lIntConstRef="«stmnt.leIntConst.name»" «ENDIF»
    «IF stmnt.leFloatConst != null» lFloatConstRef="«stmnt.leFloatConst.name»" «ENDIF»
    «IF stmnt.riVarArg != null» rParamRef="«stmnt.riVarArg.name»" «ENDIF»
    «IF stmnt.riStrConst != null» rStrConstRef="«stmnt.riStrConst.name»" «ENDIF»
    «IF stmnt.riIntConst != null» rIntConstRef="«stmnt.riIntConst.name»" «ENDIF»
    «IF stmnt.riFloatConst != null» rFloatConstRef="«stmnt.riFloatConst.name»" «ENDIF»'''
    
  def String toXml(OpenContextualPath opCtxPath) '''
  nexusId="«opCtxPath.variantPurposeRow.head.variant.name»"
  contextPsPvRefs="«FOR variPurpPair : opCtxPath.variantPurposeRow»«variPurpPair.variant.name» «variPurpPair.purpose.name» «ENDFOR»"'''

  def String toXml(ClosedContextualPath clCtxPath) '''
  «IF clCtxPath.variantPurposeRow != null && clCtxPath.variantPurposeRow.head != null »
  nexusPvRef"«clCtxPath.variantPurposeRow.head.variant.name»"«ELSE»
  nexusPvRef"«clCtxPath.closingVariant.name»"«ENDIF»
  contextPsPvRefs="«FOR variPurpPair : clCtxPath.variantPurposeRow»«variPurpPair.variant.name» «variPurpPair.purpose.name» «ENDFOR»«clCtxPath.closingVariant.name»"'''

  def String stringToXmlTag(String value, String tag) '''
    <«tag»>«value»</«tag»>
'''
  def String toXml(XLabel xlabel, String indent) '''
  «indent»<kb:label>«xlabel.label»</kb:label>
  «IF xlabel.description != null»
  «indent»<kb:description>
  «indent»«xlabel.description»
  </kb:description>
«ENDIF»
'''
   
   def String toXml(Sensor sensor) '''
  «sensor.labeledDescription.toXml("")» 
   '''
   
  def String toXml(Concept concept) '''
    <kb:concept id="«concept.name»">
      «concept.labeledDescription.toXml("")»
      <kb:attributes>
        «IF concept.listOfAttStrReferences != null»
          «FOR attRef : concept.listOfAttStrReferences»
          <kb:attribute valueRef="«attRef.ref.name»" />
          «ENDFOR»
        «ENDIF»
        «IF concept.listOfAttIntReferences != null»
          «FOR attRef : concept.listOfAttIntReferences»
          <kb:attribute valueRef="«attRef.ref.name»" />
          «ENDFOR»
        «ENDIF»
        «IF concept.listOfAttFloatReferences != null»
          «FOR attRef : concept.listOfAttFloatReferences»
          <kb:attribute valueRef="«attRef.ref.name»" />
          «ENDFOR»
        «ENDIF»
      </kb:attributes>
    </kb:concept>
  '''

  def String toXml(Variant variant) '''
    <kb:variant id="«variant.name»">
      «variant.labeledDescription.toXml("")»
      «IF (  ( variant.listOfOneOutOfThisRanges != null &&
               variant.listOfOneOutOfThisRanges.size > 0 )
          || ( variant.listOfConceptReferences != null &&
               variant.listOfConceptReferences.size > 0 )
          || ( variant.listOfOneOfTheseAttributesSections != null &&
               variant.listOfOneOfTheseAttributesSections.size > 0 ))»
      <kb:oneOfTheseUnits>
        «IF variant.listOfOneOfTheseAttributesSections != null»
          «FOR oneOutOfThisSection : variant.listOfOneOfTheseAttributesSections»
            «IF (oneOutOfThisSection.listOfStrAttReferences != null &&
                 oneOutOfThisSection.listOfStrAttReferences.size>0)»
            <kb:oneOutOfTheseStrAttributes>
              «FOR attStrRef : oneOutOfThisSection.listOfStrAttReferences»
              <kb:attribute valueRef="«attStrRef.ref.name»" />
              «ENDFOR»
            </kb:oneOutOfTheseStrAttributes>           
            «ENDIF»
            «IF (oneOutOfThisSection.listOfIntAttReferences != null &&
                 oneOutOfThisSection.listOfIntAttReferences.size>0)»
            <kb:oneOutOfTheseIntAttributes>
              «FOR attStrRef : oneOutOfThisSection.listOfIntAttReferences»
              <kb:attribute valueRef="«attStrRef.ref.name»" />
              «ENDFOR»
            </kb:oneOutOfTheseIntAttributes>           
            «ENDIF»  
            «IF (oneOutOfThisSection.listOfFloatAttReferences != null &&
                 oneOutOfThisSection.listOfFloatAttReferences.size>0)»
            <kb:oneOutOfTheseFloatAttributes>
              «FOR attStrRef : oneOutOfThisSection.listOfFloatAttReferences»
              <kb:attribute valueRef="«attStrRef.ref.name»" />
              «ENDFOR»
            </kb:oneOutOfTheseFloatAttributes>           
            «ENDIF»
          «ENDFOR»
        «ENDIF»
        «IF variant.listOfOneOutOfThisRanges != null»
        «FOR oneOutOfThisRange : variant.listOfOneOutOfThisRanges »
          «IF oneOutOfThisRange.attIntRangeReference != null »
           <kb:oneOutOfThisRange rangeRef="«oneOutOfThisRange.attIntRangeReference.ref.name»" />
          «ENDIF»
          «IF oneOutOfThisRange.attFloatRangeReference != null »
            <kb:oneOutOfThisRange rangeRef="«oneOutOfThisRange.attFloatRangeReference.ref.name»" />
          «ENDIF»
        «ENDFOR»
        «ENDIF»
        «IF (variant.listOfConceptReferences != null
        && variant.listOfConceptReferences.size()>0)»
        <kb:oneOfTheseConcepts>
          «FOR conc : variant.listOfConceptReferences »
          <kb:concept conceptRef="«conc.ref.name»" />
          «ENDFOR»
        </kb:oneOfTheseConcepts>
        «ENDIF»
      </kb:oneOfTheseUnits>
      «ENDIF»
    </kb:variant>
    
  '''
  
  def String toXml(IsFulfilledBy isFulFilledBy) '''
    <kb:isFulfilledBy purposeRef="«isFulFilledBy.purposeRef.name»" 
      variantRefs="«FOR vari : isFulFilledBy.variantRefs»«vari.name» «ENDFOR»" />
  '''
 
  def String toXml(IsConstitutedBy isConstitutedBy) '''
    <kb:isConstitutedBy variantRef="«isConstitutedBy.variantRef.name»">
      «FOR cba : isConstitutedBy.listOfisConstitutedByAssignments»
      <kb:constituent many="«cba.many»" purposeRef="«cba.purposeRef.name»" />
      «ENDFOR»
    </kb:isConstitutedBy>  
  ''' 
  def String toXml(SensorStringAttrArea sensorArea) '''
  «var sensor=sensorArea.sensor»
    <kb:sensor id="«sensor.name»">
      «sensor.toXml»
      <kb:valueSet>
        «FOR value : sensorArea.sensorStringValues»
        <kb:value id="«value.name»" sensedByRef="«value.sensedBy.name»">«value.value»</kb:value>
        «ENDFOR»
      </kb:valueSet>
    </kb:sensor>
   '''
  def String toXml(SensorIntAttrArea sensorArea) '''
  «var sensor=sensorArea.sensor»
    <kb:sensor id="«sensor.name»">
      «sensor.toXml»
      <kb:valueSet>
        «IF sensorArea.listOfSensorIntDigits != null»
        «FOR digit : sensorArea.listOfSensorIntDigits»
        <kb:value id="«digit.name»" sensedByRef="«digit.sensedBy.name»">«digit.value»</kb:value>
        «ENDFOR»
        «ENDIF»
        «IF sensorArea.listOfSensorIntRanges != null»
        «FOR range : sensorArea.listOfSensorIntRanges»
        <kb:range id="«range.name»" sensedByRef="«range.sensedBy.name»"
          minVal="«range.value.minVal»" maxVal="«range.value.maxVal»" incVal="«range.value.incVal»" />
        «ENDFOR»
        «ENDIF»
      </kb:valueSet>
    </kb:sensor>
   '''

  def String toXml(SensorFloatAttrArea sensorArea) '''
  «var sensor=sensorArea.sensor»
    <kb:sensor id="«sensor.name»">
      «sensor.toXml»
      <kb:valueSet>
        «IF sensorArea.listOfSensorFloatDigits != null»
        «FOR digit : sensorArea.listOfSensorFloatDigits»
        <kb:value id="«digit.name»" sensedByRef="«digit.sensedBy.name»">«digit.value»</kb:value>
        «ENDFOR»
        «ENDIF»
        «IF sensorArea.listOfSensorFloatRanges != null»
        «FOR range : sensorArea.listOfSensorFloatRanges»
        <kb:range id="«range.name»" sensedByRef="«range.sensedBy.name»"
          minVal="«range.value.minVal»" maxVal="«range.value.maxVal»" incVal="«range.value.incVal»" />
       «ENDFOR»
        «ENDIF»
      </kb:valueSet>
    </kb:sensor>
  '''


   
}

